const Promise = require('bluebird');
const fs = Promise.promisifyAll(require('fs'));
const path = require('path');
const glob = Promise.promisify(require('glob'));

function keepLatest(n, inputPath) {
  return glob(inputPath)
  .then(files => {
    return Promise.map(files, file => fs.statAsync(file))
    .then(stats => {
      let filesData = files.map((file, i) => {
        return {
          file,
          atime: stats[i].atime.getTime()
        }
      })
      .sort((a, b) => {
        return a.atime - b.atime;
      });

      let toDelete = filesData.slice(0, filesData.length - n);

      return Promise.map(toDelete, file => fs.unlinkAsync(file.file))
        .then(res => {
          return Promise.resolve(toDelete.map(file => file.file));
        });
    });
  });
}

module.exports = keepLatest;
